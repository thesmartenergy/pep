# Copyright 2016 ITEA 12004 SEAS Project.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . #Resource data framework
@prefix owl: <http://www.w3.org/2002/07/owl#> .     #Owl ontology language
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .   #RDF schema 
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .  #XML standard datatypes
@prefix dc: <http://purl.org/dc/terms/> .  #Dublin Core Metadata Initiative terms
@prefix vann: <http://purl.org/vocab/vann/> .  #A vocabulary for annotating vocabulary descriptions
@prefix voaf: <http://purl.org/vocommons/voaf#> . #A vocabulary of a friend, for describing relations between linked vocabularies
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> . #Semantic web vocabulary status ontology
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix cc: <http://creativecommons.org/ns#>.
@prefix dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>. # The DOLCE+DnS Ultralite ontology.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix rdfp: <https://w3id.org/rdfp/>.
@prefix ssn: <http://purl.oclc.org/NET/ssnx/ssn#>.

@prefix pep: <https://w3id.org/pep/>.
@base <https://w3id.org/pep/>.

pep: a owl:Ontology , voaf:Vocabulary , foaf:Document ;
  dc:title "Process Execution ontology."@en ;
  dc:description """A Process Execution Platform exposes a RESTful API to expose process executors that implement processes and generate process executions, whose input and output are RDF graphs.


We propose a REST-compliant way to expose processes whose inputs and outputs are described as RDF graphs.

These are called Process Execution Platforms.

There are process execution containers.



## Process Execution Containers description 

Following the Linked Data principles, Process Execution Containers are given URI identifiers, and a RDF description of these resources can be retrieved at their URI.

The PEP vocabulary can be used to describe Process Executors, the Process they implement with their input and output graph descriptions, and the Process Executions they generate with their actual input and output graphs. This vocabulary can be accessed at this URI: https://w3id.org/pep/ using content negociation (i.e., set HTTP Header field `Accept` to one of the RDF syntaxes media types, or access it directly in [turtle](index.ttl), or in [RDF/XML](index.rdf).

This vocabulary reuses but extends the [W3C Semantic Sensor Network ontology](https://www.w3.org/TR/vocab-ssn/), and the [SAN ontology](http://www.irit.fr/recherches/MELODI/ontologies/SAN.owl#). Instead of having a `ssn:Sensor` (resp. `san:Actuator`) that implements a `ssn:Sensing` (resp. `san:Acting`) method and generates `ssn:Observation`s (resp. `san:Actuation`s), one describe a `pep:ProcessExecutor` that implements a `pep:Process` and generates `pep:ProcessExecution`s.

For example, this website exposes and describes a Process Execution Container identified by https://w3id.org/pep/ProcessExecutionContainer Its full description uses the PEP vocabulary and can be found at URI https://w3id.org/pep/example. Use content negociation, or access it directly in [turtle](https://w3id.org/pep/example.ttl), or in [RDF/XML](https://w3id.org/pep/example.rdf).

## A Process Execution Platform

Do POST on the Process Execution Container, then ...

receive HTTP headers:

```
Location: https://w3id.org/pep/RandomNumberGeneration/jc5usf
Location-Input: https://w3id.org/pep/RandomNumberGeneration/jc5usf/input
Location-Output: https://w3id.org/pep/RandomNumberGeneration/jc5usf/output
```

Meaning: 

- the Process Execution is located and described at https://w3id.org/pep/RandomNumberGeneration/jc5usf;
- the input graph of the Process Execution has URI https://w3id.org/pep/RandomNumberGeneration/jc5usf/input (and is accessible there);
- the output graph of the Process Execution has URI https://w3id.org/pep/RandomNumberGeneration/jc5usf/output (and is accessible there).


## Implementation over Jersey

[`pep-jersey-server`](get-started.html) is an extension of Jersey that eases the development of Process Executors.


This ontology generalizes the core of the SSN ontology (https://www.w3.org/ns/ssn/)."""@en ;
  dc:description <pep.png> ;
  dc:issued "2016-07-01"^^xsd:date ;
  dc:modified "2016-09-12"^^xsd:date ;
  dc:creator <http://www.maxime-lefrancois.info/me#> ;
  cc:license <http://creativecommons.org/licenses/by/4.0/> ;
  vann:preferredNamespacePrefix "pep" ;
  vann:preferredNamespaceUri <https://w3id.org/pep/> ;  
  owl:versionIRI <pep-1.0> ;
  owl:versionInfo "v1.0" ;
  owl:imports rdfp: . 


# processes and graph descriptions

pep:Process a owl:Class ;
  rdfs:label "Process"@en ;
  rdfs:comment """The description of a process. A process generalizes the concept of ssn:Sensing in the SSN ontology, and of san:Acting in the SAN ontology. Examples of processes include sensing, acting, planning, or forecasting.

   In the first version of the SSN ontology, ssn:Process was a subclass of dul:Method. A dul:Method is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans.

   Here, a process links to the description of the RDF graph it expects as input, and to the description of the graph it outputs. For example, the following RDF graph describes a process where:

- the topic of the input graph is a car;
- the topic of the output is the speed of that same car, which is forecasted.

```
    <process> a pep:Process ;
      pep:hasInput [ a rdfp:GraphDescription ;
        foaf:topic _:car ] ;
      pep:hasOutput [ a rdfp:GraphDescription ;
        foaf:topic _:estimation ] .
    _:car <speed> [ pep:estimation _:estimation ] .
    _:estimation pep:interpretedAs sdmx-code:obsStatus-F . # (see also sdmx-codeS mentioned in the W3C RDF Data Cube Vocabulary)
```

"""@en ;
  rdfs:subClassOf [ owl:onProperty pep:hasInput ; owl:allValuesFrom rdfp:GraphDescription ] ;
  rdfs:subClassOf [ owl:onProperty pep:hasOutput ; owl:allValuesFrom rdfp:GraphDescription ] ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

# process executor

pep:ProcessExecutor a owl:Class ;
  rdfs:label "Process Executor" ;
  rdfs:comment """A Process Executor can execute (implement) processes. A Process Executor may be a physical device, a computational method, a web service, a laboratory setup with a person following a method, or any other thing that can follow a Process. This concept generalizes ssn:Sensor, which in the latest version of the SSN ontology is a subclass of dul:Object. A dul:Object is any physical, social, or mental object, or a substance.

  Prototypical process executors are Sensor, Actuator, Estimator.

  Here, a process executor may also link to the description of the RDF graph it expects as input, and to the description of the graph it outputs. These descriptions factorize and extend those of all the processes it implements. For example, the following RDF graph describes a process executor where:

- the topic of the input graph is a specific car;
- the topic of the output is the speed of that same car.

```
    <sensor> a pep:ProcessExecutor ;
      pep:hasInput [ a rdfp:GraphDescription ;
        foaf:topic <car/1> ] ;
      pep:hasOutput [ a rdfp:GraphDescription ;
        foaf:topic _:estimation ] .
    <car/1> <speed> [ pep:estimation _:estimation ] .
```

Links to ProcessExecution describe the Executions made.

Links to Processes define how the executor can make Executions (it may implement several Processes). A Process Executor implements each of the methods used by the Executions it made. 

  Other metadata may detail geolocation, vendor, operator, consumed power, etc."""@en ;
  rdfs:subClassOf ssn:FeatureOfInterest ;
  rdfs:subClassOf [ owl:onProperty pep:hasInput ; owl:allValuesFrom rdfp:GraphDescription ] ;
  rdfs:subClassOf [ owl:onProperty pep:hasOutput ; owl:allValuesFrom rdfp:GraphDescription ] ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:implements a owl:ObjectProperty ;
  rdfs:label "implements" ;
  rdfs:comment """A relation between an Process Executor and a method it implements. This concept generalizes ssn:implements, which in the first version of the SSN ontology is a subproperty of dul:isDescribedBy. dul:isDescribedBy is the relation between an Entity and a Description. A Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system)."""@en ;
  rdfs:domain pep:ProcessExecutor ;
  rdfs:range pep:Process ;
  owl:propertyChainAxiom ( pep:executed pep:methodUsed ) ;
  owl:propertyChainAxiom ( pep:processExecutionContainer pep:forProcess ) ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

# process execution container

pep:ProcessExecutionContainer a owl:ObjectProperty ;
  rdfs:label "Process Execution Container" ;
  rdfs:comment """The class of Process Executor Containers. They are Web container of Process Execution ressources, where one may operate HTTP POST requests to execute a given process."""@en ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:processExecutionContainer a owl:ObjectProperty ;
  rdfs:label "process execution container" ;
  rdfs:comment """Links a Process Executor to a Web container of Process Execution ressources, where one may operate HTTP POST requests to execute the process."""@en ;
  rdfs:domain pep:ProcessExecutor ;
  rdfs:range pep:ProcessExecutionContainer ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:forProcess a owl:ObjectProperty ;
  rdfs:label "for process" ;
  rdfs:comment """Links a Process Execution Container to the Process that is executed when one operate a HTTP POST request to it."""@en ;
  rdfs:domain pep:ProcessExecutionContainer ;
  rdfs:range pep:Process ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:executor a owl:ObjectProperty ;
  rdfs:label "executor" ;
  rdfs:comment "Relationship between a process execution container and the process executor that controls it."@en ;
  vs:term_status "stable" ;
  rdfs:domain pep:ProcessExecutionContainer ;
  rdfs:range pep:ProcessExecutor ;
  rdfs:isDefinedBy pep: .


# process execution

pep:ProcessExecution a owl:Class ;
  rdfs:label "Process Execution" ;
  rdfs:comment """A process execution is a Situation where a process has been executed by a Process Executor. This concept generalizes ssn:Observation, which was limited to a stimulus from exactly one property and outputted a value for exactly one property, the first being a proxy for the second.

  In the first version of the SSN ontology, ssn:Observation is defined as a subClassOf dul:Situation. A dul:Situation is a view, consistent with ('satisfying') a Description, on a set of entities.  It can also be seen as a 'relational context' created by an observer on the basis of a 'frame' (i.e. a Description).  For example, a PlanExecution is a context including some actions executed by agents according to certain parameters and expected tasks to be achieved from a Plan. Also, in the first version of SSN, instances of ssn:Observation are linked through dul:includesEvent only to instances of ssn:Stimulus. dul:includesEvent is a relation between situations and events, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included a burning of my fingers). Property ssn:fromStimulus was used instead of dul:includeEvent in the latest SSN ontology, and SEAS defines pep:stimulus.

  Links to ProcessExecutor and Process describe what made the Execution and how. 

  Here, a process execution may also link to the names of RDF graphs that represent the input, and the output. For example, the following RDF graph describes a process execution:

```
  <exec> a pep:ProcessExecution ;
    pep:hasInput <exec/input> ;
    pep:hasOutput <exec/output> .
```

  Then the graph with name <exec/input> contains: 

```
  <car/1> <speed> <car/1/speed> .
  <car/1/speed> pep:estimation <estimation> .
  <estimation> pep:temporalContext [ time:inXSDDateTime "2016-07-22T12:05:43Z"^^xsd:dateTime ] .
```

  And the graph with name <exec/output> contains: 

```
  <car/1> <speed> <car/1/speed> .
  <car/1/speed> pep:estimation <estimation> .
  <estimation> pep:estimatedValue "73 km/h"^^cdt:ucum ; 
    pep:temporalContext [ time:inXSDDateTime "2016-07-22T12:05:43Z"^^xsd:dateTime ] ;
    pep:interpretedAs sdmx-code:obsStatus-F .
```

"""@en ;
  rdfs:subClassOf [ owl:onProperty pep:hasInput ; owl:allValuesFrom rdfp:Graph ] ;
  rdfs:subClassOf [ owl:onProperty pep:hasOutput ; owl:allValuesFrom rdfp:Graph ] ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .


pep:executedBy a owl:ObjectProperty, owl:FunctionalProperty ;
  rdfs:label "executed by" ;
  rdfs:comment "Relationship between an execution and the agent that made it. This concept generalizes ssn:observedBy, which in the first version of the SSN ontology is a sub property of dul:includesObject. dul:includesObject is a relation between situations and objects, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included me)."@en ;
  vs:term_status "stable" ;
  rdfs:domain pep:ProcessExecution ;
  rdfs:range pep:ProcessExecutor ;
  owl:inverseOf pep:executed ;
  rdfs:isDefinedBy pep: .
 
pep:executed a owl:ObjectProperty ;
  rdfs:label "executed" ;
  rdfs:comment "Relationship between a process executor and an execution it made."@en ;
  vs:term_status "stable" ;
  rdfs:domain pep:ProcessExecutor ;
  rdfs:range pep:ProcessExecution ;
  owl:inverseOf pep:executedBy ;
  rdfs:isDefinedBy pep: .

pep:methodUsed a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "method used" ;
  rdfs:comment "Relation between a ProcessExecution and the Process it executes. This concept generalizes ssn:sensingMethodUsed, which in the first version of the SSN ontology is a sub property of dul:satisfies. dul:satisfies is a relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."@en ;
  rdfs:domain pep:ProcessExecution ;
  rdfs:range pep:Process ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

# additional axioms

[] a owl:AllDisjointClasses ;
   owl:members ( ssn:FeatureOfInterest ssn:Property pep:ProcessExecution pep:Process ) .

[] a owl:AllDisjointClasses ;
   owl:members ( ssn:Property pep:ProcessExecutor pep:ProcessExecution pep:Process ) .

# inputs and outputs

pep:hasInput a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "has input" ;
  rdfs:comment """Relation between:

1. a pep:Process and the description of the input graph;
2. a pep:ProcessExecutor and the description of the input graph;
3. a pep:ProcessExecution and the input graph.
"""@en ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:hasOutput a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "has output" ;
  rdfs:comment """Relation between:

1. a pep:Process and the description of the output graph;
2. a pep:ProcessExecutor and the description of the output graph;
3. a pep:ProcessExecution and the output graph.
"""@en ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .
