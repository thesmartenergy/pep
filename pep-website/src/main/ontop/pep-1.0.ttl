# Copyright 2016 ITEA 12004 SEAS Project.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/terms/> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix voaf: <http://purl.org/vocommons/voaf#> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix cc: <http://creativecommons.org/ns#>.
@prefix dul: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix rdfp: <https://w3id.org/rdfp/>.
@prefix ssn: <http://purl.oclc.org/NET/ssnx/ssn#>.

@prefix pep: <https://w3id.org/pep/>.
@base <https://w3id.org/pep/>.

pep: a owl:Ontology , voaf:Vocabulary , foaf:Document ;
  dc:title "Process Execution ontology."@en ;
  dc:description """The process execution ontology is a proposal for a simple extension of both the [W3C Semantic Sensor Network](https://www.w3.org/TR/vocab-ssn/) and the [Semantic Actuator Network](https://www.irit.fr/recherches/MELODI/ontologies/SAN.owl) ontology cores. 

SSN describe `ssn:Sensor`s that implement `ssn:Sensing` methods and generate `ssn:Observation`s, which are (soon to be) activities.

In parallel to this, SAN describes `san:Actuator`s that implement `san:Acting` methods and generate `ssn:Actuation` activities.

In this ontology, we want to generalize these two parallel conceptual models, and account for a third use case: *Web services exposed on the web may trigger the execution of some processes*. 

We hence propose the following core concepts for the Process Execution ontology:

> `pep:ProcessExecutor`s implement `pep:Process` methods, and generate `pep:ProcessExecution`s activities.

_Note: we call for comments and suggestions about the naming of these concepts [in this project open issue](https://github.com/thesmartenergy/pep/issues/1)_

As sensing and acting methods in SSN and SAN, processes may describe the necessary inputs and outputs. This is represented using properties `pep:hasInput` and `pep:hasOutput`. These properties may also be used to describe the actual input and output of a specific process execution.

Figure below overviews the PEP ontology, and illustrates it with an example.

[![Overview of the PEP Ontology](https://w3id.org/pep/pep.png)](https://w3id.org/pep/pep.png).

Additional documents describe alignments with other existing ontologies:

- [the Semantic Sensor Network ontology](https://w3id.org/pep/SSNAlignment);
- [the RDF Presentation ontology](https://w3id.org/pep/RDFPAlignment).

## Process Execution Platform

[Process execution platforms](https://w3id.org/pep/platform.html) expose process executors on the Web in a RESTful way.

"""@en ;
  dc:issued "2016-07-01"^^xsd:date ;
  dc:modified "2016-09-12"^^xsd:date ;
  dc:creator <http://www.maxime-lefrancois.info/me#> ;
  cc:license <https://www.apache.org/licenses/LICENSE-2.0> ;
  vann:preferredNamespacePrefix "pep" ;
  vann:preferredNamespaceUri <https://w3id.org/pep/> ;  
  owl:versionIRI <pep-1.0> ;
  owl:versionInfo "v1.0" . 


# processes and graph descriptions

pep:Process a owl:Class ;
  rdfs:label "Process"@en ;
  rdfs:comment """The description of a process. A process generalizes the concept of `ssn:Sensing` in the SSN ontology, and of `san:Acting` in the SAN ontology. Examples of processes include sensing, acting, planning, or forecasting.

In the first version of the SSN ontology, `ssn:Process` was a subclass of `dul:Method`.

A `dul:Method` is a Description that defines or uses concepts in order to guide carrying out actions aimed at a solution with respect to a problem. It is different from a Plan, because plans could be carried out in order to follow a method, but a method can be followed by executing alternative plans."""@en ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

# process executor

pep:ProcessExecutor a owl:Class ;
  rdfs:label "Process Executor" ;
  rdfs:comment """A Process Executor can execute (implement) processes. A Process Executor may be a physical device, a computational method, a web service, a laboratory setup with a person following a method, or any other thing that can follow a Process. This concept generalizes ssn:Sensor, which in the latest version of the SSN ontology is a subclass of dul:Object. A dul:Object is any physical, social, or mental object, or a substance.

Prototypical process executors are Sensor, Actuator, Estimator.

Links to ProcessExecution describe the Executions made.

Links to Processes define how the executor can make Executions (it may implement several Processes). A Process Executor implements each of the methods used by the Executions it made. 

Other metadata may detail geolocation, vendor, operator, consumed power, etc."""@en ;
  owl:disjointWith pep:Process ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:implements a owl:ObjectProperty ;
  rdfs:label "implements" ;
  rdfs:comment """A relation between an Process Executor and a method it implements. This concept generalizes `ssn:implements`, which in the first version of the SSN ontology is a subproperty of `dul:isDescribedBy`.

`dul:isDescribedBy` is the relation between an Entity and a Description. A Description gives a unity to a Collection of parts (the components), or constituents, by assigning a Role to each of them in the context of a whole Object (the system)."""@en ;
  rdfs:domain pep:ProcessExecutor ;
  rdfs:range pep:Process ;
  owl:propertyChainAxiom ( pep:executed pep:methodUsed ) ;
  owl:propertyChainAxiom ( pep:processExecutionContainer pep:forProcess ) ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

# process execution container

pep:ProcessExecutionContainer a owl:Class ;
  rdfs:label "Process Execution Container" ;
  rdfs:comment """The class of Process Executor Containers. They are Web container of Process Execution ressources, where one may operate HTTP POST requests to execute a given process."""@en ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:processExecutionContainer a owl:ObjectProperty ;
  rdfs:label "process execution container" ;
  rdfs:comment """Links a Process Executor to a Web container of Process Execution ressources, where one may operate HTTP POST requests to execute the process."""@en ;
  rdfs:domain pep:ProcessExecutor ;
  rdfs:range pep:ProcessExecutionContainer ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:forProcess a owl:ObjectProperty ;
  rdfs:label "for process" ;
  rdfs:comment """Links a Process Execution Container to the Process that is executed when one operate a create operation request to it."""@en ;
  rdfs:domain pep:ProcessExecutionContainer ;
  rdfs:range pep:Process ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:executor a owl:ObjectProperty ;
  rdfs:label "executor" ;
  rdfs:comment "Relationship between a process execution container and the process executor that controls it."@en ;
  vs:term_status "stable" ;
  rdfs:domain pep:ProcessExecutionContainer ;
  rdfs:range pep:ProcessExecutor ;
  rdfs:isDefinedBy pep: .


# process execution

pep:ProcessExecution a owl:Class ;
  rdfs:label "Process Execution" ;
  rdfs:comment """A process execution is the execution activity that is led by the Process Executor. This concept generalizes ssn:Observation, which describes an activity in the newest versoin of the SSN ontology and is hence now aligned with the O&M concept of Observation.

A process execution links to:

- the process executor it is associated to;
- the process method used;
- the input and the output of the process execution.
"""@en ;
  owl:disjointWith pep:Process, pep:ProcessExecutor ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .


pep:executedBy a owl:ObjectProperty, owl:FunctionalProperty ;
  rdfs:label "executed by" ;
  rdfs:comment """Relationship between an execution and the agent that made it. This concept generalizes `ssn:observedBy`, which in the first version of the SSN ontology is a sub property of `dul:includesObject`. 

`dul:includesObject` is a relation between situations and objects, e.g. 'this morning I've prepared my coffee and had my fingers burnt' (i.e.: the preparation of my coffee this morning included me)."""@en ;
  vs:term_status "stable" ;
  rdfs:domain pep:ProcessExecution ;
  rdfs:range pep:ProcessExecutor ;
  owl:inverseOf pep:executed ;
  rdfs:isDefinedBy pep: .
 
pep:executed a owl:ObjectProperty ;
  rdfs:label "executed" ;
  rdfs:comment "Relationship between a process executor and an execution it was assigned to."@en ;
  vs:term_status "stable" ;
  rdfs:domain pep:ProcessExecutor ;
  rdfs:range pep:ProcessExecution ;
  owl:inverseOf pep:executedBy ;
  rdfs:isDefinedBy pep: .

pep:methodUsed a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "method used" ;
  rdfs:comment """Relation between a ProcessExecution and the Process it executes. This concept generalizes `ssn:sensingMethodUsed`, which in the first version of the SSN ontology is a sub property of `dul:satisfies`. 

  `dul:satisfies` is a relation between a Situation and a Description, e.g. the execution of a Plan satisfies that plan."""@en ;
  rdfs:domain pep:ProcessExecution ;
  rdfs:range pep:Process ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

# inputs and outputs


pep:hasInput a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "has input" ;
  rdfs:comment """Links a process, process executor, or process execution, to some description of their input.

Intuitively:

- the input description of some process executor specializes the input description of the process it implements;
- the input description of some process execution specializes both the input description of the process executor that executed it, and of the process  method used.

"""@en ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .

pep:hasOutput a owl:ObjectProperty , owl:FunctionalProperty ;
  rdfs:label "has output" ;
  rdfs:comment """Links a process, process executor, or process execution, to some description of their output.

Intuitively:

- the output description of some process executor specializes the output description of the process it implements;
- the output description of some process execution specializes both the output description of the process executor that executed it, and of the process  method used.

"""@en ;
  vs:term_status "stable" ;
  rdfs:isDefinedBy pep: .
